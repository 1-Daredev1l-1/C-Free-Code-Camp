Compilation: 
    . Clang is still an issue to get working: 
        . Resources : 
            . https://clang.llvm.org/docs/StandardCPlusPlusModules.html
            . https://www.zverovich.net/2023/04/10/cxx20-modules-in-clang.html
			. Important resource: READ: 
				. https://www.albertogramaglia.com/modern-cpp-modules-theory/
				. https://www.albertogramaglia.com/modern-cpp-modules-practice/

        . Resolved to using clang 18 with the documentation here: https://clang.llvm.org/docs/StandardCPlusPlusModules.html

        . I got the docker container from here: https://hub.docker.com/r/teeks99/clang-ubuntu/tags

        . Commands : 

            . PULL: docker pull teeks99/clang-ubuntu:18
            . ACTION: Change to the D:/Sandbox folder on your windows machine.
            . RUN: docker container run --name clanghank -it -v ${PWD}:/home/gakwaya teeks99/clang-ubuntu:18
            . ACTION: Attach to the container in VS Code and have fun.

        . Important: 
            . Clang seems to expect that the name of the generated PCM file be the same as the exported module.
				. Keep this in mind. Luckily it supports flags that allow us to keep naming our interface files
					with the .ixx extension. The flag is -x c++-module. See example below.


		. Compilation: 
			//Generate the header unit for iostream
				. clang++ -std=c++20 -stdlib=libc++ -x c++-system-header iostream --precompile -o iostream.pcm
			//Build the interface file into a pcm file, giving it the location of the header unit for iostream
				. clang++ -std=c++20 -stdlib=libc++ -fmodule-file=iostream.pcm -x c++-module math.ixx --precompile -o my_math_module.pcm

			//Generate the object file for the entry point (main) file
				. clang++ -std=c++20 -stdlib=libc++ main.cpp -fprebuilt-module-path=. -c -o main.o

			//Generate the object file for the module file
				. clang++ -std=c++20 -stdlib=libc++ my_math_module.pcm -c -o my_math_module.o

			//Link everything together to generate the rooster binary.
				. clang++ -std=c++20 -stdlib=libc++ main.o my_math_module.o -o rooster
               
